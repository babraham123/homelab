# /etc/opt/zigbee2mqtt/config/configuration.yaml
# Ref: https://www.zigbee2mqtt.io/guide/configuration/
---
# Enable in UI when pairing devices
permit_join: false
mqtt:
  server: mqtt://mqtt.bket.net:1883

serial:
  # Could be either USB port (/dev/serial/by-id/ or /dev/ttyUSB0),
  # network Zigbee adapters (tcp://192.168.1.1:6638) or
  # mDNS adapter (mdns://my-adapter). Supports slzb-06, uzg-01, czc
  port: mdns://slzb-06
  # Optional: MQTT base topic for Zigbee2MQTT MQTT messages (default: zigbee2mqtt)
  base_topic: zigbee2mqtt
  # Optional: absolute path to SSL/TLS certificate of CA used to sign server and client certificates (default: nothing)
  ca: '/etc/ssl/ca.chain.crt'
  # Optional: absolute paths to SSL/TLS key and certificate for client-authentication (default: nothing)
  key: '/etc/ssl/client.key'
  cert: '/etc/ssl/client.crt'
  # Optional: MQTT server authentication user (default: nothing)
  # user: my_user
  # Optional: MQTT server authentication password (default: nothing)
  # password: my_password
  # Optional: MQTT client ID (default: nothing)
  client_id: 'z2m-01'
  # Optional: disable self-signed SSL certificates (default: true)
  reject_unauthorized: true
  # Optional: Include device information to mqtt messages (default: false)
  include_device_information: false
  # Optional: MQTT keepalive in seconds (default: 60)
  keepalive: 60
  # Optional: MQTT protocol version (default: 4), set this to 5 if you
  # use the 'retention' device specific configuration
  version: 4
  # Optional: Disable retain for all send messages. ONLY enable if you MQTT broker doesn't
  # support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform).
  # Enabling will break the Home Assistant integration. (default: false)
  force_disable_retain: false

# Will run frontend on port 8080
frontend:
  # Optional, default 8080
  port: 8080
  # Optional, empty by default to listen on both IPv4 and IPv6. Opens a unix socket when given a path instead of an address (e.g. '/run/zigbee2mqtt/zigbee2mqtt.sock')
  # Don't set this if you use Docker or the Home Assistant add-on unless you're sure the chosen IP is available inside the container
  host: 0.0.0.0
  # Optional, enables authentication, disabled by default, cleartext (no hashing required)
  # auth_token: your-secret-token
  # Optional, url on which the frontend can be reached, currently only used for the Home Assistant device configuration page
  url: 'https://zigbee.{{ site.url }}'
  # Optional, certificate file path for exposing HTTPS. The sibling property 'ssl_key' must be set for HTTPS to be activated
  # ssl_cert: /config/etc/letsencrypt/live/mydomain.com/fullchain.pem
  # Optional, private key file path for exposing HTTPS. The sibling property 'ssl_cert' must be set for HTTPS to be activated
  # ssl_key: /config/etc/letsencrypt/live/mydomain.com/privkey.pem
  # Optional, base URL for the frontend, when served from a subpath, e.g. behind the proxy. Default value is '/'
  base_url: /

advanced:
  # Optional: Logging level, options: debug, info, warning, error (default: info)
  log_level: info
  log_namespaced_levels:
    z2m:mqtt: warning
    # z2m: Zigbee2MQTT
    # zh: zigbee-herdsman, logged events from the Zigbee library used by Zigbee2MQTT.
    # zhc: zigbee-herdsman-converters, logged events from the devices support library.
  log_output:
    - console
  # Optional: ZigBee pan ID (default: shown below)
  # Setting pan_id: GENERATE will make Zigbee2MQTT generate a new panID on next startup
  # pan_id: 0x1a62
  # Optional: Zigbee extended pan ID, GENERATE will make Zigbee2MQTT generate a new extended panID on next startup (default: shown below)
  # ext_pan_id: [0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD]
  # Optional: Zigbee channel, changing might require re-pairing of some devices (see docs below). (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid problems)
  # (default: 11)
  # Ref: https://www.zigbee2mqtt.io/advanced/zigbee/02_improve_network_range_and_stability.html#reduce-wi-fi-interference-by-changing-the-zigbee-channel
  channel: 11
  # Optional: network encryption key
  # GENERATE will make Zigbee2MQTT generate a new network key on next startup
  # Note: changing requires repairing of all devices (default: shown below)
  # network_key: [1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6, 8, 10, 12, 13]
  homeassistant_legacy_entity_attributes: false
  homeassistant_legacy_triggers: false
  legacy_api: false
  legacy_availability_payload: false

# devices: devices.yaml
# groups: groups.yaml

# Optional: Enable the availability feature (default = false)
# topic: zigbee2mqtt/[FRIENDLY_NAME]/availability
availability:
  active:
    # Time after which an active device will be marked as offline in
    # minutes (default = 10 minutes)
    timeout: 10
  passive:
    # Time after which a passive device will be marked as offline in
    # minutes (default = 1500 minutes aka 25 hours)
    timeout: 1500

homeassistant:
  # Optional: Home Assistant discovery topic (default: shown below)
  # Note: should be different from [MQTT base topic](../mqtt.md) to prevent errors in HA software
  discovery_topic: 'homeassistant'
  # Optional: Home Assistant status topic (default: shown below)
  # Note: in addition to the `status_topic`, 'homeassistant/status' will also be used
  status_topic: 'hass/status'
  # Optional: Home Assistant legacy entity attributes, (default: shown below), when enabled:
  # Zigbee2MQTT will send additional states as attributes with each entity. For example,
  # A temperature & humidity sensor will have 2 entities for the temperature and
  # humidity, with this setting enabled both entities will also have
  # an temperature and humidity attribute.
  # Note: Disabling this option, requires a Home Assistant restart
  legacy_entity_attributes: false
  # Optional: Home Assistant legacy triggers (default: shown below), when enabled:
  # - Zigbee2mqt will send an empty 'action' or 'click' after one has been send
  # - A 'sensor_action' and 'sensor_click' will be discoverd
  legacy_triggers: false
  # Optional: Experimental support for Home Assistant event entities, may break in the future (default: shown below) when enabled:
  # - An `event` entity will be discovered for each 'action'.
  # - The `event_type` attribute will contain the action itself, additional attributes like `button` will have further information.
  experimental_event_entities: false
...
